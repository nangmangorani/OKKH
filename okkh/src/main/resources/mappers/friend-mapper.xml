<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="friendMapper">
 
 <resultMap type="Friend" id="friendResultSet">
    <result column="mem_no" property="memNo"/>
	<result column="mem_id" property="memId"/>
	<result column="git_nick" property="gitNick"/>
	<result column="avatar_url" property="avatarUrl"/>
	<result column="mem_token" property="memToken"/>
	<result column="mem_intro" property="memIntro"/>
	<result column="create_date" property="createDate"/>
	<result column="status" property="status"/>
	<result column="team" property="team"/>
	<result column="team_status" property="teamStatus"/>
    <result column="bf_giver"  property="bfGiver"/>
    <result column="bf_taker"  property="bfTaker"/>
    <result column="fStatus"  property="fStatus"/>
    <result column="request_date"  property="requestDate"/>
    <result column="ISent" property="isent"/>
	<result column="FriSent" property="friSent"/>
	<result column="user_no" property="userNo"/>
 
 </resultMap>
 
 

 
 
 <!-- 특정 회원의 친구 상태가 'Y'(친구) 인 회원들의 목록 조회 -->
 <select id="selectFriendList" resultMap="friendResultSet">
    select *
		from member
		    left join 
		        (
		        select nvl(a.bf_taker, nvl(b.bf_giver, a.bf_taker)) user_no, a.status ISent,b.status FriSent
		        from (select * from friend where bf_giver = #{memNo}) a
		        full outer join (select * from friend where bf_taker = #{memNo}) b on (a.bf_taker = b.bf_giver)
		        )
		    on (mem_no = user_no)
		where status = 'Y' and mem_no != #{memNo}
        and user_no != #{memNo} 
        order by mem_no
 
 </select>
 
 <!-- 특정 회원의 친구 목록 개수를 조회하는 쿼리 -->
 <select id="listCount" resultType="_int">
 	select 
 	       count(*)
 	  from friend
 	 where bf_taker = #{memNo} 
 	    or bf_taker= #{memNo}  
 </select>



 <!-- 특정 회원의 친구 아님 목록 개수 -->
 <select id="noneFriendListCount" resultType="_int">
 		select 
	 	       count(*)
	 	  from friend
	 	 where BF_TAKER = #{memNo} 
	 	   and status != 'Y'     
 
 </select>
 
 <!-- 특정 회원의 친구아님 목록 -->
 
 <select id="selectNoneFriendList" resultMap="friendResultSet">
 
   select 
	        bf_giver
	      , bf_taker
	      , status
	      , to_char(request_date,'YYYY-MM-DD') as "request_date"
	   from friend
	  where bf_taker = #{bfTaker}
        and status != 'Y'
	  order by request_date desc
 </select>
 
 
 <!-- 모든 회원의 리스트 개수 -->
 <select id="allMemberListCount" resultType="_int">
  select 
         count(*)
    from member     
   where status = 'Y'      
 
 </select>
 
 <!-- 모든 회원 조회 -->
 <select id="selectMemberList" resultMap="friendResultSet">
   select *
		from member
		    left join 
		        (
		        select nvl(a.bf_taker, nvl(b.bf_giver, a.bf_taker)) user_no, a.status ISent, b.status FriSent
		        from (select * from friend where bf_giver = #{memNo}) a
		        full outer join (select * from friend where bf_taker = #{memNo}) b on (a.bf_taker = b.bf_giver)
		        )
		    on (mem_no = user_no)
		where status = 'Y' and mem_no != #{memNo}
        order by mem_no
 </select>
 
 
 <!-- 친구 요청보냈을 경우 -->
 <insert id="addFriend">
	 insert 
	   into friend 
	   (
	   	 bf_giver
	   , bf_taker
	   , status
	   , request_date	 
	   )
	   values
	   (
	     #{bfGiver}
	   , #{bfTaker}
	   , 'A'    
       , sysdate
       )
 </insert>
 
 <!-- 친구 요청 수락 -->
 <insert id="acceptFriend">
  insert 
	   into friend 
	   (
	   	 bf_giver
	   , bf_taker
	   , status
	   , request_date	 
	   )
	   values
	   (
	     #{bfGiver}
	   , #{bfTaker}
	   , 'Y'    
       , sysdate
       )
 
 
 </insert>
 
 <!-- 친구 요청 수락되었을 때 친구의 상태도 Y로 변경하는 쿼리 -->
  <update id="acceptMyFriend">
  update 
         friend 
     set status = 'Y' 
   where bf_taker =  #{bfGiver}
     and bf_giver =  #{bfTaker}
 
 </update>
 
 
 <!-- 친구 삭제하기 / 친구 요청 취소 -->
 <!-- 친구 상태 내꺼 삭제하는 메소드 -->
 <delete id="deleteFriend">
 	delete from friend
     where bf_giver = #{bfGiver}
       and bf_taker = #{bfTaker}	
 	        
 </delete>
 
 <!-- 친구의 상태 삭제하는 메소드 -->
 <delete id="deleteMyFriend">
 	delete from friend
     where bf_giver = #{bfTaker}
       and bf_taker = #{bfGiver}	
 	        
 </delete>
 
 <!-- 친구였다가 내가 차단했을 때 -->
 <update id="blockOldFriend">
 	update friend 
 	   set status = 'D' 
 	 where bf_taker = #{bfTaker}
 	   and bf_giver = #{bfGiver}    
 </update>
 
 <!-- 원래 친구 아니었는데 그냥 차단하는 경우 -->
 <insert id="blockNoneFriend">
 	 insert 
 	   into friend 
 	   (
 	     bf_giver
 	   , bf_taker
 	   , status
 	   , request_date
 	   ) 
 	   values 
 	   ( 
 	     #{bfGiver}
 	   , #{bfTaker}
 	   , 'D' 
 	   , sysdate
 	   )
 
 </insert>
 
 <!-- 친구 거절 -->
  <insert id="refuseFriend">
   insert 
     into friend 
     values 
     (
       #{bfGiver}
     , #{bfTaker}
     , 'B'
     , sysdate
     )
  
  </insert>
 
 
 <!-- 친구 거절 취소 / 친구 차단 취소용 쿼리 -->
 <delete id="cancleRefuseFriend">
 	delete from friend     
 	 where bf_giver = #{bfGiver}
 	   and bf_taker = #{bfTaker}      
 
 </delete>
 
 <select id="searchMember" resultMap="friendResultSet" parameterType="hashmap">
          select *
			from member
			    left join 
			        (
			        select nvl(a.bf_taker, nvl(b.bf_giver, a.bf_taker)) user_no, nvl(a.status,0) ISent, nvl(b.status,0) FriSent
			        from (select * from friend where bf_giver = #{memNo}) a
			        full outer join (select * from friend where bf_taker = #{memNo}) b on (a.bf_taker = b.bf_giver)
			        )
			    on (mem_no = user_no)
			where status = 'Y' 
			  and mem_no != #{memNo}
	          and git_nick like '%' || #{search} || '%'
	        order 
	           by mem_no
 
 </select>
 
	<select id="mainListFriend" resultMap="friendResultSet">
		select git_nick, profile
		  from friend f
		  join member on (bf_giver = mem_no)
		 where bf_taker = #{memNo}
		   and f.status = 'Y'
	</select>
 
</mapper>
